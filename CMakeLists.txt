CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

PROJECT( autordf CXX C )

IF( NOT WIN32 )
    INCLUDE( FindPkgConfig )
ENDIF()

INCLUDE( GNUInstallDirs )

# WINRT: build with winrt support
IF(CMAKE_SYSTEM_NAME MATCHES WindowsStore)
    MESSAGE(STATUS "Building for WindowsStore/WINRT")
    SET(WINRT 1)
ELSE()
    SET(WINRT 0)
ENDIF()

IF (EXISTS ${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
    include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
    conan_basic_setup()
    SET(BOOST_ROOT "${CONAN_BOOST_ROOT}")
    # SET(Boost_DEBUG TRUE)
    SET(BOOST_INCLUDEDIR "${CONAN_INCLUDE_DIRS_BOOST}")
    SET(BOOST_LIBRARYDIR "${CONAN_LIB_DIRS_BOOST}")
    SET(Boost_NO_SYSTEM_PATHS ON)
endif()

#Used to create symbolic links in shared libraries
SET(SOLIBVERSION "1.0")

IF("${RDF_C_API}" STREQUAL "")
    SET(RDF_C_API REDLAND)
ENDIF()

IF( "${RDF_C_API}" STREQUAL "REDLAND" )
    IF( WIN32 )
        message( FATAL_ERROR "TODO: windows redland" )
    ELSE()
        PKG_SEARCH_MODULE( REDLAND REQUIRED redland )
    ENDIF()
    SET(RDF_C_API_INCLUDE_DIRS ${REDLAND_INCLUDE_DIRS})
    SET(RDF_C_API_LIBRARY_DIRS ${REDLAND_LIBRARY_DIRS})
    SET(RDF_C_API_LIBRARIES ${REDLAND_LIBRARIES})
    ADD_DEFINITIONS("-DUSE_REDLAND")
    SET(PKGCONFIG_EXTRA_CFLAGS "-DUSE_REDLAND")
    SET(PKGCONFIG_REQUIRES_PRIVATE "redland >= 1.0.15, raptor2 >= 2.0.8")
ENDIF()

IF( "${RDF_C_API}" STREQUAL "SORD" )
    IF( WIN32 )
        FIND_PACKAGE( SORD REQUIRED )
        FIND_PACKAGE( SERD REQUIRED )
        message("Sord: includes ${SORD_INCLUDE_DIRS}, libdir ${SORD_LIBRARY_DIRS}, libs ${SORD_LIBRARIES}")
    ELSE()
        PKG_SEARCH_MODULE( SERD REQUIRED serd-0 serd)
        PKG_SEARCH_MODULE( SORD REQUIRED sord-0 sord)
    ENDIF()
    SET(RDF_C_API_INCLUDE_DIRS ${SORD_INCLUDE_DIRS})
    SET(RDF_C_API_LIBRARY_DIRS ${SORD_LIBRARY_DIRS})
    SET(RDF_C_API_LIBRARIES ${SORD_LIBRARIES} ${SERD_LIBRARIES})
    ADD_DEFINITIONS("-DUSE_SORD")
    SET(PKGCONFIG_EXTRA_CFLAGS "-DUSE_SORD")
    SET(PKGCONFIG_REQUIRES_PRIVATE "serd-0, sord-0")
ENDIF()

FIND_PACKAGE( Threads )

INCLUDE_DIRECTORIES(
    "${PROJECT_SOURCE_DIR}/include"
    "${PROJECT_SOURCE_DIR}/src"
    "${PROJECT_SOURCE_DIR}/src/autordf"
    "${PROJECT_BINARY_DIR}/include"
    "${PROJECT_BINARY_DIR}/src"
    "${RDF_C_API_INCLUDE_DIRS}"
)

LINK_DIRECTORIES(
    ${LIBRARY_OUTPUT_PATH}
    ${RDF_C_API_LIBRARY_DIRS}
)

IF( WIN32 )
    SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -wd4267 -wd4244 -wd4018 -wd4800 -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_DEPRECATE" )
    IF(WINRT)
    	ADD_DEFINITIONS("-DWINRT")
    ENDIF()
ELSE()
    SET( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g -O0" )
    SET( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -g -O2 ${AXT_FORCE_FLAGS_RELEASE_OPTIM}" )
    SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wunused-parameter -Wunused-variable -fPIC" )
    IF (NOT ANDROID AND NOT APPLE AND NOT EMSCRIPTEN)
        SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror" )
    ENDIF()
    IF ($ENV{AXT_BUILD_COV})
        message("Coverage build activated")
        SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --coverage" )
        SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} --coverage" )
        SET( CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS} --coverage" )
        SET( CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} --coverage" )
    ENDIF()
ENDIF()

IF("${LIBRARY_TYPE}" STREQUAL "")
    SET(LIBRARY_TYPE SHARED)
ENDIF()

IF("${BUILD_TESTS}" STREQUAL "")
    IF (WIN32)
        SET(BUILD_TESTS 0)
    ELSE()
        SET(BUILD_TESTS 1)
    ENDIF()
ENDIF()

IF("${BUILD_DOC}" STREQUAL "")
    SET(BUILD_DOC 0)
ENDIF()

IF("${BUILD_TOOLS}" STREQUAL "")
    SET(BUILD_TOOLS 1)
ENDIF()

IF("${LIBRDF_IN_SUBDIRS}" STREQUAL "1")
    ADD_DEFINITIONS("-DLIBRDF_IN_SUBDIRS")
ENDIF()

ADD_SUBDIRECTORY(src/autordf)

if(${BUILD_TESTS} STREQUAL "1")
    ADD_SUBDIRECTORY(tests)
endif()

CONFIGURE_FILE (
  "${PROJECT_SOURCE_DIR}/autordf.pc.in"
  "${PROJECT_BINARY_DIR}/autordf.pc"
)

INSTALL(FILES
  "${PROJECT_BINARY_DIR}/autordf.pc"
  DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig
)

CONFIGURE_FILE (
  "${PROJECT_SOURCE_DIR}/autordf-ontology.pc.in"
  "${PROJECT_BINARY_DIR}/autordf-ontology.pc"
)

INSTALL(FILES
  "${PROJECT_BINARY_DIR}/autordf-ontology.pc"
  DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig
)


set(INCLUDE_INSTALL_DIR include/ CACHE INTERNAL "bla")
set(LIB_INSTALL_DIR lib/  CACHE INTERNAL "bla")

include(CMakePackageConfigHelpers)
configure_package_config_file(autordfConfig.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/autordfConfig.cmake
    INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/autordf/cmake
    PATH_VARS INCLUDE_INSTALL_DIR LIB_INSTALL_DIR)
write_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/autordfConfigVersion.cmake
    VERSION ${SOLIBVERSION}
    COMPATIBILITY AnyNewerVersion)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/autordfConfig.cmake ${CMAKE_CURRENT_BINARY_DIR}/autordfConfigVersion.cmake
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/autordf/cmake )


INSTALL(DIRECTORY
    ${CMAKE_SOURCE_DIR}/include/${PROJECT_NAME}

    DESTINATION include/
)

IF(BUILD_DOC)
    ADD_SUBDIRECTORY(doc)
ENDIF()
